# Untitled notebook

```elixir
Mix.install([
  {:tzdata, "~> 1.1"},
  {:theory_craft, path: "D:/Documents/Dev/Elixir/theorycraft"}
])

Application.put_env(:elixir, :time_zone_database, Tzdata.TimeZoneDatabase)
```

## Section

```elixir
defmodule TheoryCraft.Test do
  @moduledoc """
  Documentation for `TheoryCraft`.
  """

  alias TheoryCraft.Utils
  alias TheoryCraft.DataFeeds.{MemoryDataFeed, TicksCSVDataFeed}
  alias TheoryCraft.Layers.TickToCandleLayer

  ## Public API

  def test() do
    dir = "D:/Documents/Dev/trading/python/data"
    
    filename = "XAUUSD_Ticks_18.08.2025-18.08.2025.csv"
    full_path = Path.join(dir, filename)
    stream = TicksCSVDataFeed.stream!([file: full_path] ++ dukascopy_opts())
    
    # filename = "ticks_XAUUSD_Minute_20240101_230202_20241231_215859.csv"
    # full_path = Path.join(dir, filename)
    # stream = TicksCSVDataFeed.stream!([file: full_path] ++ ctrader_opts())

    fun = fn -> MemoryDataFeed.new(stream) end
    memory_df = time("MemoryDataFeed loading", fun)
    memory_stream = MemoryDataFeed.stream!(from: memory_df)

    ## Transform data to m5 bars
    # TODO....

    fun = fn ->
      memory_stream
      |> Stream.run()
      |> IO.inspect()
    end

    time("MemoryDataFeed in memory", fun)

    IO.puts("Close")
    # :ok = MemoryDataFeed.close(memory_df)
  end

  ## Private functions

  defp dukascopy_opts() do
    [
      time: "Local time",
      ask: "Ask",
      bid: "Bid",
      ask_volume: "AskVolume",
      bid_volume: "BidVolume",
      skip_headers: false,
      time_format: :dukascopy
    ]
  end

  defp ctrader_opts() do
    [
      time: "Timestamp",
      ask: "Ask",
      bid: "Bid",
      ask_volume: "AskVolume",
      bid_volume: "BidVolume",
      skip_headers: false
    ]
  end

  defp time(name, fun) do
    {time, value} = :timer.tc(fun, :millisecond)
    IO.puts("#{name} took #{Utils.duration_ms_to_string(time)}")
    value
    end
end


TheoryCraft.Test.test()
```

```elixir
# dir = "D:/Documents/Dev/trading/python/data"
# filename = "XAUUSD_Ticks_18.08.2025-18.08.2025.csv"
# full = Path.join(dir, filename)

# content =
#   full
#   |> File.stream!()
#   |> Enum.take(51)
#   |> Enum.join()

# File.write!(
#   "D:/Documents/Dev/Elixir/theorycraft/test/fixtures/XAUUSD_ticks_dukascopy.csv",
# content
# )


# %Strategy{}
# # |> add_data("tick_xauusd.csv", name: "xauusd_ticks")
# |> add_data("tick_xauusd.csv")
# |> resample("m5")
# |> resample("D", data: 0, name: "xauusd_daily")
# |> add_indicator(TheoryCraft.Indicators.SMA, period: 14, name: "sma_14")
# |> add_indicator(TheoryCraft.Indicators.Supertrend, period: 14, name: "supertrend_14", data: 0)
# |> add_strategy(TheoryCraft.Strategies.MyStrategy)
# |> set_balance(100_000)
# |> set_commission(0.001)
```
